// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/auth.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthGenerator_ReqPq_FullMethodName        = "/Authenticate.AuthGenerator/req_pq"
	AuthGenerator_Req_DHParams_FullMethodName = "/Authenticate.AuthGenerator/req_DH_params"
)

// AuthGeneratorClient is the client API for AuthGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthGeneratorClient interface {
	ReqPq(ctx context.Context, in *PGRequest, opts ...grpc.CallOption) (*PGResponse, error)
	Req_DHParams(ctx context.Context, in *DHParamsRequest, opts ...grpc.CallOption) (*DHParamsResponse, error)
}

type authGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthGeneratorClient(cc grpc.ClientConnInterface) AuthGeneratorClient {
	return &authGeneratorClient{cc}
}

func (c *authGeneratorClient) ReqPq(ctx context.Context, in *PGRequest, opts ...grpc.CallOption) (*PGResponse, error) {
	out := new(PGResponse)
	err := c.cc.Invoke(ctx, AuthGenerator_ReqPq_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGeneratorClient) Req_DHParams(ctx context.Context, in *DHParamsRequest, opts ...grpc.CallOption) (*DHParamsResponse, error) {
	out := new(DHParamsResponse)
	err := c.cc.Invoke(ctx, AuthGenerator_Req_DHParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthGeneratorServer is the server API for AuthGenerator service.
// All implementations must embed UnimplementedAuthGeneratorServer
// for forward compatibility
type AuthGeneratorServer interface {
	ReqPq(context.Context, *PGRequest) (*PGResponse, error)
	Req_DHParams(context.Context, *DHParamsRequest) (*DHParamsResponse, error)
	mustEmbedUnimplementedAuthGeneratorServer()
}

// UnimplementedAuthGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedAuthGeneratorServer struct {
}

func (UnimplementedAuthGeneratorServer) ReqPq(context.Context, *PGRequest) (*PGResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqPq not implemented")
}
func (UnimplementedAuthGeneratorServer) Req_DHParams(context.Context, *DHParamsRequest) (*DHParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Req_DHParams not implemented")
}
func (UnimplementedAuthGeneratorServer) mustEmbedUnimplementedAuthGeneratorServer() {}

// UnsafeAuthGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthGeneratorServer will
// result in compilation errors.
type UnsafeAuthGeneratorServer interface {
	mustEmbedUnimplementedAuthGeneratorServer()
}

func RegisterAuthGeneratorServer(s grpc.ServiceRegistrar, srv AuthGeneratorServer) {
	s.RegisterService(&AuthGenerator_ServiceDesc, srv)
}

func _AuthGenerator_ReqPq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PGRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGeneratorServer).ReqPq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthGenerator_ReqPq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGeneratorServer).ReqPq(ctx, req.(*PGRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGenerator_Req_DHParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGeneratorServer).Req_DHParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthGenerator_Req_DHParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGeneratorServer).Req_DHParams(ctx, req.(*DHParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthGenerator_ServiceDesc is the grpc.ServiceDesc for AuthGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Authenticate.AuthGenerator",
	HandlerType: (*AuthGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "req_pq",
			Handler:    _AuthGenerator_ReqPq_Handler,
		},
		{
			MethodName: "req_DH_params",
			Handler:    _AuthGenerator_Req_DHParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: grpc/biz-server.proto

package biz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BizServerClient is the client API for BizServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BizServerClient interface {
	GetUsers(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*UsersList, error)
	GetUsersWithSqlInject(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*UsersList, error)
}

type bizServerClient struct {
	cc grpc.ClientConnInterface
}

func NewBizServerClient(cc grpc.ClientConnInterface) BizServerClient {
	return &bizServerClient{cc}
}

func (c *bizServerClient) GetUsers(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*UsersList, error) {
	out := new(UsersList)
	err := c.cc.Invoke(ctx, "/biz.biz_server/get_users", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizServerClient) GetUsersWithSqlInject(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*UsersList, error) {
	out := new(UsersList)
	err := c.cc.Invoke(ctx, "/biz.biz_server/get_users_with_sql_inject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BizServerServer is the server API for BizServer service.
// All implementations must embed UnimplementedBizServerServer
// for forward compatibility
type BizServerServer interface {
	GetUsers(context.Context, *UserAuth) (*UsersList, error)
	GetUsersWithSqlInject(context.Context, *UserAuth) (*UsersList, error)
	mustEmbedUnimplementedBizServerServer()
}

// UnimplementedBizServerServer must be embedded to have forward compatible implementations.
type UnimplementedBizServerServer struct {
}

func (UnimplementedBizServerServer) GetUsers(context.Context, *UserAuth) (*UsersList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedBizServerServer) GetUsersWithSqlInject(context.Context, *UserAuth) (*UsersList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersWithSqlInject not implemented")
}
func (UnimplementedBizServerServer) mustEmbedUnimplementedBizServerServer() {}

// UnsafeBizServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BizServerServer will
// result in compilation errors.
type UnsafeBizServerServer interface {
	mustEmbedUnimplementedBizServerServer()
}

func RegisterBizServerServer(s grpc.ServiceRegistrar, srv BizServerServer) {
	s.RegisterService(&BizServer_ServiceDesc, srv)
}

func _BizServer_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServerServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biz.biz_server/get_users",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServerServer).GetUsers(ctx, req.(*UserAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizServer_GetUsersWithSqlInject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServerServer).GetUsersWithSqlInject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biz.biz_server/get_users_with_sql_inject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServerServer).GetUsersWithSqlInject(ctx, req.(*UserAuth))
	}
	return interceptor(ctx, in, info, handler)
}

// BizServer_ServiceDesc is the grpc.ServiceDesc for BizServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BizServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biz.biz_server",
	HandlerType: (*BizServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_users",
			Handler:    _BizServer_GetUsers_Handler,
		},
		{
			MethodName: "get_users_with_sql_inject",
			Handler:    _BizServer_GetUsersWithSqlInject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/biz-server.proto",
}
